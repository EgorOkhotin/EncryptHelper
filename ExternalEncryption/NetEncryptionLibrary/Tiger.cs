using System;

namespace ExternalEncryption.NetEncryptionLibrary
{
  internal class Tiger : TigerBlockHashAlgorithm
  {
    private static readonly ulong[] t1 = new ulong[256]
    {
      192161084409973854UL,
      12412566003039578348UL,
      8272369121297300691UL,
      7854730284916899642UL,
      14815005489349235091UL,
      8463286011307239906UL,
      12782397079979459523UL,
      5082381371487377520UL,
      16910140313379794150UL,
      14213758138097816412UL,
      5541490850629862524UL,
      766444128913191948UL,
      1204553577021685498UL,
      14325024777722506090UL,
      1401289229890216703UL,
      1893918052108309022UL,
      5461170853188208586UL,
      2807403890869420487UL,
      9624326389127268278UL,
      5699452412975025298UL,
      15532482038911174219UL,
      10247451172578640253UL,
      7624427211800470465UL,
      13116673706182362478UL,
      9043806901924967914UL,
      7231827479902542914UL,
      13778939497803891424UL,
      6875646691050945796UL,
      17492696646193712838UL,
      7786398710221814956UL,
      8167597339425066981UL,
      1830707105885056415UL,
      18253814936157636059UL,
      14445834393465872395UL,
      9656360342964607310UL,
      11887624205054558387UL,
      10399800464770430483UL,
      15811522062611479537UL,
      1783120314242633559UL,
      248005612187258982UL,
      7688500634458409525UL,
      17647688304275301531UL,
      8591138587399736033UL,
      15633037317611203077UL,
      13643301300320350067UL,
      5042603696143252264UL,
      2053990370701680515UL,
      10011753445593162089UL,
      3741955435321465241UL,
      4334407786093429776UL,
      13046945900594209529UL,
      1449859124008718907UL,
      18187146081364455764UL,
      16146959651762660871UL,
      9821796187408409551UL,
      10596140432474060285UL,
      3847074041673952000UL,
      4649400157396704725UL,
      14173244547020241484UL,
      14606001508420839982UL,
      2909491499011162061UL,
      4458122598401901638UL,
      7071481730398905774UL,
      6725294491764459774UL,
      12245192337599078954UL,
      14074214025701625255UL,
      1226483701329067140UL,
      15924709066658687059UL,
      14770628265263427446UL,
      13470993037325816321UL,
      16615015929427450229UL,
      10714085159597194772UL,
      479582384021555544UL,
      8040612334407127321UL,
      15648517004018321088UL,
      17112515522038886866UL,
      8751740296797632830UL,
      6603430683508552489UL,
      8942924799792477540UL,
      3573742753214737511UL,
      16027224499883949314UL,
      6349030933445924429UL,
      15944798094267651441UL,
      12269290567006146658UL,
      10560886376429385824UL,
      5194369709296555225UL,
      7174555471952375656UL,
      7982812746821821468UL,
      9739074967177125163UL,
      3232013613859041307UL,
      12699367828500449645UL,
      16215284685696605295UL,
      3112410413624570453UL,
      16110141331589860284UL,
      6658792778814911418UL,
      6126246269502162262UL,
      12375791606097406863UL,
      4721051187472420532UL,
      12913124649239600434UL,
      13593718485625264257UL,
      2663576151211431276UL,
      928112258657309258UL,
      5664920977038299994UL,
      2704699625848084345UL,
      2312925355491498803UL,
      17917931256736142540UL,
      2964761606854114992UL,
      4148718494125202372UL,
      4082542483235864459UL,
      5171535286737311423UL,
      2166137813939512309UL,
      8844224567096109974UL,
      12073497029628754377UL,
      10313129584137200909UL,
      7053919794999990929UL,
      5576291611870337032UL,
      17071918333241912043UL,
      17712290504455390414UL,
      17740771901396443681UL,
      11758017946897781732UL,
      10978122417803504804UL,
      14919163634504077233UL,
      11490461953836997027UL,
      12165654920579776535UL,
      853355433004222246UL,
      16522522127453838137UL,
      2124075034376372323UL,
      5881355904936746717UL,
      1033318428544969251UL,
      1692585388818821524UL,
      17200759021255085090UL,
      1107424405919510210UL,
      9235073569857586017UL,
      12471487353192899638UL,
      963191604767572015UL,
      4506934758573727688UL,
      11934771386322515838UL,
      11732209241253279301UL,
      7421261837586505858UL,
      3318186242040429129UL,
      14044682965315173317UL,
      1910808081503UL,
      4771413979138012118UL,
      15088778931977875125UL,
      11635083951108444120UL,
      3247421105326436348UL,
      17436899165275233567UL,
      8353265116968520410UL,
      12565337778774156881UL,
      10871874290690996106UL,
      6528592316425799439UL,
      15397071475010590000UL,
      15142762107613549607UL,
      7320455443630736945UL,
      11094769083352733519UL,
      2539802313181221187UL,
      11139220281097600151UL,
      6084456898448652712UL,
      1615327116689102472UL,
      8126548348642832045UL,
      17352529224806255890UL,
      6320848846662414801UL,
      17282944389244390251UL,
      3439926484095136410UL,
      11228441527149633512UL,
      4583261464596863494UL,
      5278432013075676693UL,
      672210957064462075UL,
      13025854346008288483UL,
      14498696732057183809UL,
      3753742208681096767UL,
      13261228611926580032UL,
      17986491732842022258UL,
      111470777923844445UL,
      1951374535466601971UL,
      9571400392277455661UL,
      13953014824866208278UL,
      4830799035278983864UL,
      13222015508416504078UL,
      6842302225500364445UL,
      11335550205397804100UL,
      15716824796288558584UL,
      12864465832706149959UL,
      18320322304522000518UL,
      14411022707054136303UL,
      16460574793555246339UL,
      3977519900599801820UL,
      9148781857317432677UL,
      6468933130968205401UL,
      8516219711084257782UL,
      1539015908620793624UL,
      7527026033758878374UL,
      16798794393021101279UL,
      3088835283432281588UL,
      3651919061693825289UL,
      9461488011709396048UL,
      18023579054726214285UL,
      11414687284771824631UL,
      308165109378616703UL,
      8884692927086426203UL,
      2438838841395254149UL,
      14896570625953598117UL,
      2823241734971430590UL,
      3896218688877146334UL,
      393786506094771122UL,
      15328770503170608105UL,
      10473175056012527227UL,
      10077980508395331620UL,
      6934559736714979565UL,
      17857395910652154129UL,
      10891890112678993536UL,
      11568068034921390039UL,
      14648678256067979723UL,
      9344782632198616737UL,
      13887300970038794941UL,
      10781369878360680786UL,
      10110669637513019833UL,
      4236391428300945648UL,
      555138268555536248UL,
      5351590591369890935UL,
      4306521946498657944UL,
      11295261863032656012UL,
      4901816398460471456UL,
      9412954593909222793UL,
      7485939926152528684UL,
      13340749930154375154UL,
      6245128712556390173UL,
      13728064239465473455UL,
      18121470962401429929UL,
      7772052866533484500UL,
      639373189613950878UL,
      2515940555210603828UL,
      16388058205984530442UL,
      9187445612742136046UL,
      12674756240461064247UL,
      16320932256496599612UL,
      15242008505997455568UL,
      15052846203706837274UL,
      1313621308117380133UL,
      3526835097255131285UL,
      13493710469666597351UL,
      8704164972314360376UL,
      17526606163846348700UL,
      5969067443919232116UL,
      5791404459833380522UL,
      16764031247701565831UL,
      6001456072058810555UL,
      10172882867408301456UL,
      2241175407069758350UL,
      15484192582789326408UL,
      8359644330926224055UL,
      9923258301097833899UL,
      18441560808156168866UL,
      16657473437411103805UL,
      11975088000835799072UL,
      16988008119788939130UL
    };
    private static readonly ulong[] t2 = new ulong[256]
    {
      16620180768708174136UL,
      13087780087216503960UL,
      6213947727727520144UL,
      5496303794639560149UL,
      15650762814559589428UL,
      642450021946863605UL,
      15520994653159001329UL,
      14194067837486075289UL,
      16073846824652113554UL,
      15991021072757504790UL,
      8011611286970690052UL,
      5372247966639775667UL,
      11956475335693613649UL,
      18180761396468528926UL,
      16734845874302321705UL,
      15893194850365545698UL,
      14791316918028724237UL,
      1788379855404599063UL,
      3792259505844355329UL,
      857793142685420274UL,
      2176386753693503798UL,
      16165556464122449145UL,
      18433866172389203220UL,
      6070247714570225101UL,
      7358743242340641331UL,
      9743228014385134454UL,
      1522910625901990663UL,
      16311896314355823354UL,
      5235630359010597374UL,
      12672095911739354858UL,
      277273466943670671UL,
      3580831169916433691UL,
      17414337388161447897UL,
      4657750985732713388UL,
      1177149711660596421UL,
      8685721698255572101UL,
      15219111713807365290UL,
      12097333842433196187UL,
      13637243492043779536UL,
      10523434303980543600UL,
      11720003357325288028UL,
      13858952002212630691UL,
      17788473056595710763UL,
      3834592178494549117UL,
      14592892671379561684UL,
      9581455899396743388UL,
      8774750272303345432UL,
      10018717713484244012UL,
      15042560872303683366UL,
      6519077675840655372UL,
      1009372798613472243UL,
      13941815458558040098UL,
      7670504156571609794UL,
      9378295951984427608UL,
      7481699948221361317UL,
      2131352009749933493UL,
      7854556580946198495UL,
      5848046147829288198UL,
      6811751916476253359UL,
      17810787299410161198UL,
      13709208837769715866UL,
      16831935031467898469UL,
      8245611441321613668UL,
      8087057586628171618UL,
      5058061449640751271UL,
      13294825889344038590UL,
      7212395796113148780UL,
      8872633840395976086UL,
      8602726521519041395UL,
      12561253256920036340UL,
      6042660761688602872UL,
      1642367900117110883UL,
      25924001596622557UL,
      7531865058110106323UL,
      4223621278438660202UL,
      3926684511422013614UL,
      16382380113756205527UL,
      5939130201053773422UL,
      8312208923375399755UL,
      5278156969609628584UL,
      12734421984402844485UL,
      3610014133393185213UL,
      9596519943885996947UL,
      10457528947283767525UL,
      7953444341930717599UL,
      13374154748713552676UL,
      14768757517560628423UL,
      5127306049615917691UL,
      9121210965518562125UL,
      8462056263389103903UL,
      17703039091829532745UL,
      5658738406708581754UL,
      3084862250275496789UL,
      15607266543450182998UL,
      14480359564937826262UL,
      14959210002597418810UL,
      18322749590590308156UL,
      17101137515031609645UL,
      9446964496815386772UL,
      14254958291267920036UL,
      1116769798908306816UL,
      1871732813531574911UL,
      12807515078363457603UL,
      2050857069623328786UL,
      942713319182180155UL,
      9890976159808040074UL,
      16508030273321291366UL,
      7028952989422544417UL,
      9018945159409650955UL,
      9348172371089358427UL,
      512456053301416255UL,
      14393200364208532887UL,
      14115843866838292311UL,
      16933948646436594152UL,
      15343759105510392346UL,
      11057037641413621675UL,
      11808547772908125699UL,
      11334024907024538672UL,
      4569666897377300404UL,
      11295294635916036800UL,
      4462677101358564049UL,
      3679240545963649394UL,
      14317631520548985665UL,
      776201060342576796UL,
      17243909456190059557UL,
      17604610864827148760UL,
      10001446825249529526UL,
      3458390008116962295UL,
      10339343346676942200UL,
      6618311662604863029UL,
      4790267690900900096UL,
      1716087693007726108UL,
      4148457837926911568UL,
      13027786587857474755UL,
      8968309666649857421UL,
      15835383998547979361UL,
      6968029403465067289UL,
      14862556481213186354UL,
      500987773930853904UL,
      10278571274613639408UL,
      2355660670689429871UL,
      3178293543037890097UL,
      12863151040160441096UL,
      12149618985794982607UL,
      894835714693979080UL,
      13140917299619429091UL,
      18098692892679743463UL,
      352461093517089771UL,
      5441805419015688358UL,
      15397362850185904124UL,
      3501129463520285556UL,
      13466617900358153333UL,
      10143225092775386885UL,
      11000396338623494503UL,
      2615208954064994172UL,
      17924140821443864558UL,
      2237558221535645089UL,
      14534824473151846839UL,
      13236032612028143522UL,
      7102368496127332321UL,
      10727377356684633597UL,
      399232473491847935UL,
      7140013836546489399UL,
      10212002790465040192UL,
      16215351210583878990UL,
      11386546581606838557UL,
      5038446221635409553UL,
      6294769326316815049UL,
      18058941983678306709UL,
      15096697943663711592UL,
      15779936050728011823UL,
      12285020473469085899UL,
      2783168786742146440UL,
      1986639352536355296UL,
      16458016955501249014UL,
      8799325730492140254UL,
      7305467695957075406UL,
      2551364576700533681UL,
      12365742766643545018UL,
      13556939551025923470UL,
      11121884478320942796UL,
      11560995779659109437UL,
      5760535140236403614UL,
      1501217875009212803UL,
      17155111980276651522UL,
      10740590121652346377UL,
      6454505253869455699UL,
      4319683495060363885UL,
      12201821765133472647UL,
      11627976249930647428UL,
      2960027307368769952UL,
      8570410701452901115UL,
      160427886842421800UL,
      13476805212888794763UL,
      13819301442714769089UL,
      15161096039636807203UL,
      10840625911376688560UL,
      6176075057452006273UL,
      7582622308322968760UL,
      6649763778434249567UL,
      18263287368680645066UL,
      2699628156079216836UL,
      16679512126457685165UL,
      2945653313023238585UL,
      2813841150172635667UL,
      8163160757531991904UL,
      11234321609599741815UL,
      12522125344893058495UL,
      649720531103423106UL,
      6394120152722619742UL,
      17511778262592440498UL,
      4753049982369101610UL,
      2408845162401379802UL,
      1253140645631747605UL,
      10647695429742646567UL,
      16862477982545442873UL,
      17990741204064412777UL,
      8367255505928917714UL,
      91400768704631494UL,
      13982368817729209682UL,
      1938401838693046941UL,
      10926450282100227564UL,
      9810146466437985312UL,
      3990523136699180870UL,
      7731749711829208666UL,
      4875740361372990282UL,
      9173201802070489451UL,
      7834799413446679311UL,
      12013351936531834174UL,
      3325271250982575439UL,
      9716135266257811596UL,
      16057385208373506132UL,
      9237091451614363741UL,
      4359958813756723849UL,
      4539467735137059035UL,
      12938212395927242823UL,
      1312945880979454078UL,
      17499315598292792898UL,
      4958176066159770025UL,
      1374196081931091686UL,
      11528309388770592584UL,
      17351559514427848379UL,
      17035274631238963172UL,
      3145683508650593868UL,
      12407221208356893421UL,
      14642276899857517585UL,
      11883033819604736188UL,
      6868326517302426863UL,
      6758043032196830276UL,
      5827167051130463242UL,
      4074828688890126937UL,
      3293442170241026694UL,
      10380983089625111273UL,
      5618223731912049521UL,
      15432198388343861625UL,
      2520538699101199374UL
    };
    private static readonly ulong[] t3 = new ulong[256]
    {
      17627031972844598171UL,
      5224129141031473793UL,
      16763249281696835647UL,
      3214246200928423523UL,
      15726560327778417602UL,
      3432136347919366758UL,
      11602366076889764820UL,
      13748905236245012081UL,
      14966620937599181975UL,
      13189541385867841559UL,
      15286072487566162144UL,
      10303139529070577017UL,
      10864531730823556037UL,
      7399204607179264370UL,
      2410740665327626235UL,
      12915425045000683329UL,
      17314732200908842661UL,
      10202635360025484021UL,
      10346713243535852126UL,
      17581701249550998855UL,
      17040480865221710045UL,
      17702999974772413585UL,
      11191718324395673746UL,
      5293216666010209768UL,
      11760393922366610529UL,
      505172698323928814UL,
      9942580208356683160UL,
      12407545700111804674UL,
      2102395425312436973UL,
      16966062287010644749UL,
      6364975572501938982UL,
      11411085932076284862UL,
      10424236436870678051UL,
      13966310405599776871UL,
      2328871106231838244UL,
      1378680973804076623UL,
      14859971753385412708UL,
      15691716086439804087UL,
      7519553577929664460UL,
      460638964809724379UL,
      18346923196617292268UL,
      6562793443469826132UL,
      1580997072160885165UL,
      859005579845670993UL,
      15387787899692562424UL,
      15066929237798940388UL,
      14509772897067631359UL,
      9722885996444150946UL,
      3784640730692549981UL,
      15931797558562408746UL,
      17728532885004413945UL,
      5877026246039211124UL,
      9823170296600362018UL,
      12063115411652128397UL,
      4036482174343220762UL,
      11995118481713087914UL,
      12472271790989499929UL,
      14327130824154426887UL,
      14241938299045681464UL,
      1637614953354483776UL,
      1768420517056302872UL,
      12383262458672579103UL,
      4469119677486524438UL,
      6862084742702193339UL,
      2666591392741323510UL,
      1958911907595193257UL,
      2078226524874004819UL,
      9182514826368667184UL,
      12779288295799455805UL,
      11485631769479599801UL,
      7984583406477441100UL,
      5152724216922222472UL,
      16434817050700023809UL,
      18234510019709827509UL,
      4838452819165657451UL,
      10009107659229344338UL,
      14082648967264690522UL,
      9603180932220791817UL,
      17494196096204240005UL,
      7192165871822020282UL,
      9489155661644977250UL,
      4293149567017494192UL,
      6266031685674981260UL,
      3297360663327026118UL,
      11022523844556058157UL,
      1848411117523063487UL,
      4803542876947788811UL,
      11932736566254486873UL,
      3918859449562378630UL,
      7730455268829558643UL,
      2300310138214025757UL,
      5073098731442674389UL,
      16579416859534749813UL,
      13327030148229826424UL,
      2481833961960165662UL,
      3483465760582650171UL,
      14647584793672228655UL,
      15832567204901745934UL,
      3683901813415452623UL,
      11860503814910655190UL,
      12166547435894244330UL,
      11567973332241571036UL,
      9797215346402413073UL,
      1263269478536931145UL,
      11026752283992642452UL,
      12676928707863290380UL,
      7280608515770959015UL,
      7790930297845911262UL,
      13387369097968848820UL,
      11741684142390913187UL,
      8900403996915095151UL,
      8816891275549542045UL,
      17970260734629539600UL,
      17214461913506212373UL,
      3119849171172694992UL,
      7662494604586420558UL,
      149203013753700084UL,
      5530308158539891708UL,
      4143436129840869576UL,
      15035120613856864378UL,
      17420391663083337065UL,
      10122251552433275289UL,
      6707891355510602429UL,
      5715986277202524800UL,
      18053537085616071129UL,
      4600951196636466039UL,
      13853232418390755104UL,
      9065747437067558111UL,
      9545093663071697752UL,
      2592076422926394627UL,
      228032410479194937UL,
      6667480117540136779UL,
      588648581915253038UL,
      16109793598716311100UL,
      3634608293302267354UL,
      1202024298738736502UL,
      6299068367672194603UL,
      1932346445954743183UL,
      7573861666572117031UL,
      18384928506924659011UL,
      3549459440654955014UL,
      8158286332358861718UL,
      10776371282861455089UL,
      17930787456663004470UL,
      14483524995628130770UL,
      8464707252757847009UL,
      397230465775035974UL,
      13489606539521972333UL,
      675316509725923312UL,
      2628613740627889320UL,
      15914532455247542225UL,
      5345232712238813773UL,
      13670086066823634667UL,
      3062009004852183467UL,
      16065515842120794365UL,
      74184876899443393UL,
      16563765655732577159UL,
      9131956796466541322UL,
      8604540880985875509UL,
      22099178757704754UL,
      16690920901523858194UL,
      11331521809212514546UL,
      2945473010562318822UL,
      15182352039751412520UL,
      2789803412788518275UL,
      13422792374992604543UL,
      15567727576646958478UL,
      1017933909609308228UL,
      16309966615540910654UL,
      8230916861376446652UL,
      14396504241698491859UL,
      8983610917420146076UL,
      8543542228473779244UL,
      1721876046845854392UL,
      16194459883656067231UL,
      5559864569757380000UL,
      4937681992884682033UL,
      13005489746079912805UL,
      9379902043379058579UL,
      5670390740934713304UL,
      2219071780988037499UL,
      7008521987288882964UL,
      6028345117330418825UL,
      10946567170512804608UL,
      7071075452076274675UL,
      16842568984047522312UL,
      1445978213955986826UL,
      10467709131392737444UL,
      951333080223670799UL,
      6099155138413436065UL,
      14140843974652577825UL,
      12209974622899604911UL,
      15533845830470436847UL,
      16381003300289283813UL,
      14619566180652406020UL,
      1340472571717533606UL,
      14798380781942060739UL,
      12690176289563455943UL,
      4461163794677446508UL,
      12598027068668226835UL,
      3341940384398866564UL,
      13564145691162448073UL,
      3829921822543532494UL,
      899996630714791418UL,
      6478536468284266291UL,
      2994597028103565543UL,
      6124895672834828926UL,
      10070201468809780037UL,
      14034091836647305274UL,
      10722043131897179970UL,
      728866099714851926UL,
      339635816873858970UL,
      17293171257415384160UL,
      17854528813163386564UL,
      11296654129530459363UL,
      8700134485486622004UL,
      12894110748725224554UL,
      17148226315594415145UL,
      8749621007278605595UL,
      12313167596287644540UL,
      4199955888901663150UL,
      13105311278491538903UL,
      18206853885491773239UL,
      8106773277103211697UL,
      16217424015630281360UL,
      5930619164422717276UL,
      4368075505682949467UL,
      4623369983466747106UL,
      8403817438537116875UL,
      13118988004869881546UL,
      1151085119119418028UL,
      6933250016240323664UL,
      6814675599201764477UL,
      15451253908724655102UL,
      5778917359701360712UL,
      11112271228158943598UL,
      9234396265040989002UL,
      10660000026621187831UL,
      4025584697920591189UL,
      5446500518121291045UL,
      10580078819325063104UL,
      18093856480622414774UL,
      8290028954029701554UL,
      9359194341002304104UL,
      7234639242841923679UL,
      2860911103167493259UL,
      14729974056387769779UL,
      7444204691177324181UL,
      8012224255291120002UL,
      6549509778060988165UL,
      13790479014885986647UL,
      16914047268224035561UL,
      4993489137437819341UL,
      4727924503904151836UL,
      15266142735205863280UL,
      7858325008468642462UL
    };
    private static readonly ulong[] t4 = new ulong[256]
    {
      6561287832113134677UL,
      1893413629145602549UL,
      12241423297023873018UL,
      7334764389497132503UL,
      421942495471316930UL,
      9361514122259283269UL,
      5948965432456907277UL,
      11573866571256030207UL,
      4831763938021002582UL,
      14173855499281032303UL,
      5678704711006605406UL,
      4536654317168965104UL,
      802439540090739142UL,
      1728614842704535657UL,
      7852250862810361152UL,
      15476660523196402343UL,
      6999787169451700297UL,
      327545298748531618UL,
      15682530895364148274UL,
      9213801181845131435UL,
      12496725194737746507UL,
      16259867463176200084UL,
      15345880568547961059UL,
      18251822138640095379UL,
      2629011484744925146UL,
      679658461659738748UL,
      15377935326821115525UL,
      2845612796809381245UL,
      10724645847535636471UL,
      7273530125705028225UL,
      4410076014410041819UL,
      16142531744609233649UL,
      18400807702465453034UL,
      12734021026892126223UL,
      8922873767131958175UL,
      15064444873285696908UL,
      15209927617758412081UL,
      14409996395411159111UL,
      5226125132195873799UL,
      2940247444995640068UL,
      14028725908667580799UL,
      6671397049608501367UL,
      8821388386505911040UL,
      14866556336909964964UL,
      16999697712800573186UL,
      2147098610462912262UL,
      16490478192134913802UL,
      15589826239460328034UL,
      5141735866072457044UL,
      3265027362719053310UL,
      11995823427747035680UL,
      6017965846669640613UL,
      4287051124723328232UL,
      8655371236021312991UL,
      17289896101590403443UL,
      2365060307249772354UL,
      1630631832073154105UL,
      1828719980936758421UL,
      2674037562503248056UL,
      11151127292458434926UL,
      17083602979237295729UL,
      204405347605452144UL,
      5797523068258732423UL,
      8122903338174012641UL,
      8739821670855295734UL,
      961841682317282412UL,
      3487881148722869326UL,
      10451359914320687899UL,
      7665614591556333409UL,
      10615335048481936743UL,
      17623836910915152341UL,
      16755608983150617741UL,
      3797048810173566205UL,
      15867839772959253853UL,
      15036032900410842080UL,
      577633178325057199UL,
      11067531136919120693UL,
      9410969925345319376UL,
      2754939666238358593UL,
      8444132705799138470UL,
      10552522441266611941UL,
      3065464070595795438UL,
      11836294715923403837UL,
      3184382822055416328UL,
      5740274767717360273UL,
      6179930651821454089UL,
      13620591815564702195UL,
      5115645765347262247UL,
      4602739923119569497UL,
      14980942922478280335UL,
      12087144524938010904UL,
      16520591415739429341UL,
      9977754778323748670UL,
      11946163567554916583UL,
      4125629484990072616UL,
      11612073089940694572UL,
      13601564719816443589UL,
      4230689665262407186UL,
      16597059646647655223UL,
      9047540561879224854UL,
      1112218670439199625UL,
      8426162753992594376UL,
      12455974392228691485UL,
      15942953649737145623UL,
      4028912247909671416UL,
      18037587660758276778UL,
      10068912122063836921UL,
      17294173404640996964UL,
      12119325820894234776UL,
      14721184867647846348UL,
      1964465731879646024UL,
      16004983352460288019UL,
      6946242362685775318UL,
      15147764321093464775UL,
      11210460518370038227UL,
      17027551023089054838UL,
      18353008346233291053UL,
      12541344992679135386UL,
      2507248404937789251UL,
      7581261321693772141UL,
      9610178040610218018UL,
      520172056875071564UL,
      3738403388662150470UL,
      16089237235933099576UL,
      13444004222476132682UL,
      930169001927683533UL,
      6889748805645999668UL,
      17415394646893863865UL,
      7941113837267854943UL,
      17203533056638157852UL,
      16292115423603831981UL,
      6332043450707792835UL,
      3386824618901547762UL,
      7130458179308482168UL,
      1271522336860346025UL,
      17449709749372114003UL,
      4823850509807911142UL,
      3107332511049695348UL,
      5437793788182680416UL,
      10131116070914134461UL,
      1494290439970088554UL,
      9837305513065677719UL,
      10238790748255110929UL,
      13014122770789771601UL,
      1159256241058966379UL,
      1026141471931805870UL,
      10231135287654865684UL,
      17837053010959982172UL,
      7511556330643118785UL,
      14530951735809871833UL,
      3932170512244996561UL,
      6834333685245251200UL,
      4355290964656419152UL,
      6487547078612259600UL,
      6267880520331323438UL,
      16901268206404951963UL,
      8190919284549556346UL,
      3366895789332200348UL,
      2444540809879438627UL,
      6459524513146455969UL,
      4077716903750958194UL,
      12277814504276850140UL,
      11473260408293916814UL,
      13249302657669755564UL,
      7734160491610189202UL,
      7910254887717195099UL,
      3836881802794822270UL,
      8311228008842563790UL,
      730509642500215940UL,
      17796343913904606621UL,
      13322520308326068757UL,
      3579688877020158541UL,
      8591780283260295173UL,
      5028082178778891827UL,
      17947929312755564086UL,
      15737034618683411560UL,
      5487541034902828271UL,
      8530400576707172340UL,
      10842208886204497163UL,
      17577087322588800898UL,
      4656569414526204412UL,
      491061932033469878UL,
      8035458231926703496UL,
      137019260109594401UL,
      7421708309958176805UL,
      8223709417363553275UL,
      5401705824239018731UL,
      11284135823146617054UL,
      5308870500428712900UL,
      12937794336414209978UL,
      1376856236535589493UL,
      12790835156597546584UL,
      11346069089450335244UL,
      1332977380922036690UL,
      3015788518022419172UL,
      11727889587379563708UL,
      6396540069380292132UL,
      2034188120276215631UL,
      16791609835598348582UL,
      17937002894199062475UL,
      3623665942510192329UL,
      9281808803060841315UL,
      1765784450088366494UL,
      5837777785993897047UL,
      1564973338399864744UL,
      15841348874649115855UL,
      4964475598524693274UL,
      13134700095219650201UL,
      6706291041494563888UL,
      17656797450059587882UL,
      10355440293737830067UL,
      7456716478970921562UL,
      18111480716034354357UL,
      9931395181607471617UL,
      11397947510903519547UL,
      18213715995450361897UL,
      284725780453796946UL,
      14614670887385324978UL,
      13525508979215740547UL,
      13357650568845892272UL,
      12839204429038201151UL,
      9535062457613112024UL,
      13702844559136150558UL,
      10782422547259353446UL,
      13847462387142919467UL,
      2560491659082246267UL,
      8971180328015050686UL,
      2265540171276805379UL,
      6093561527083620308UL,
      12169565841013306UL,
      9128413284208255679UL,
      14268022017174275008UL,
      9486595659187961990UL,
      14229791298934897290UL,
      13071773666531600249UL,
      11777955427119840489UL,
      15499833483678125794UL,
      9771890684304357024UL,
      10910763655887102767UL,
      12331386150595254155UL,
      10380906726741623612UL,
      10959706799060127120UL,
      16385370526716955323UL,
      12663551718386818228UL,
      7153300451507295513UL,
      9667256041923175882UL,
      2187906506867626476UL,
      5612681432830855607UL,
      13793523891730566065UL,
      4688837593722596333UL,
      14631077022245992099UL,
      16667000290047189060UL,
      14796252507804280846UL,
      13917690577461137509UL,
      14425632076328529814UL,
      14096329984509715743UL
    };
    private ulong[] accu;
    private ulong[] x;

    public Tiger()
      : base(64, 192)
    {
      this.Initialize();
    }

    public override void Initialize()
    {
      base.Initialize();
      this.accu = new ulong[3]
      {
        81985529216486895UL,
        18364758544493064720UL,
        17336226011405279623UL
      };
      if (this.x == null)
        this.x = new ulong[8];
      else
        Array.Resize<ulong>(ref this.x, 8);
      Array.Clear((Array) this.x, 0, 8);
    }

    private void Round(ref ulong x, ref ulong y, uint zh, uint zl)
    {
      x -= Tiger.t1[(int) (byte) zl] ^ Tiger.t2[(int) (byte) (zl >> 16)] ^ Tiger.t3[(int) (byte) zh] ^ Tiger.t4[(int) (byte) (zh >> 16)];
      y += Tiger.t4[(int) (byte) (zl >> 8)] ^ Tiger.t3[(int) (byte) (zl >> 24)] ^ Tiger.t2[(int) (byte) (zh >> 8)] ^ Tiger.t1[(int) (byte) (zh >> 24)];
    }

    private void KeySchedule(ref ulong x0, ref ulong x1, ref ulong x2, ref ulong x3, ref ulong x4, ref ulong x5, ref ulong x6, ref ulong x7)
    {
      x0 -= x7 ^ 11936128518282651045UL;
      x1 ^= x0;
      x2 += x1;
      x3 -= x2 ^ (ulong) (~(long) x1 << 19);
      x4 ^= x3;
      x5 += x4;
      x6 -= x5 ^ ~x4 >> 23;
      x7 ^= x6;
      x0 += x7;
      x1 -= x0 ^ (ulong) (~(long) x7 << 19);
      x2 ^= x1;
      x3 += x2;
      x4 -= x3 ^ ~x2 >> 23;
      x5 ^= x4;
      x6 += x5;
      x7 -= x6 ^ 81985529216486895UL;
    }

    protected override void ProcessBlock(byte[] inputBuffer, int inputOffset, int iBlkCount)
    {
      ulong num1 = this.accu[0];
      ulong y1 = this.accu[1];
      ulong num2 = this.accu[2];
      int newSize = iBlkCount * 8;
      if (this.x.Length < newSize)
        Array.Resize<ulong>(ref this.x, newSize);
      TigerBlockHashAlgorithm.BitTools.TypeBlindCopy(inputBuffer, inputOffset, this.x, 0, iBlkCount * this.i_InputBlockSize);
      int num3 = -1;
      while (iBlkCount > 0)
      {
        int num4;
        ulong x0 = this.x[num4 = num3 + 1];
        int num5;
        ulong x1 = this.x[num5 = num4 + 1];
        int num6;
        ulong x2 = this.x[num6 = num5 + 1];
        int num7;
        ulong x3 = this.x[num7 = num6 + 1];
        int num8;
        ulong x4 = this.x[num8 = num7 + 1];
        int num9;
        ulong x5 = this.x[num9 = num8 + 1];
        int num10;
        ulong x6 = this.x[num10 = num9 + 1];
        ulong x7 = this.x[num3 = num10 + 1];
        ulong y2 = num2 ^ x0;
        this.Round(ref num1, ref y1, (uint) (y2 >> 32), (uint) y2);
        ulong x8 = y1 * 5UL;
        num1 ^= x1;
        this.Round(ref x8, ref y2, (uint) (num1 >> 32), (uint) num1);
        ulong x9 = y2 * 5UL;
        ulong y3 = x8 ^ x2;
        this.Round(ref x9, ref num1, (uint) (y3 >> 32), (uint) y3);
        num1 *= 5UL;
        ulong y4 = x9 ^ x3;
        this.Round(ref num1, ref y3, (uint) (y4 >> 32), (uint) y4);
        ulong x10 = y3 * 5UL;
        num1 ^= x4;
        this.Round(ref x10, ref y4, (uint) (num1 >> 32), (uint) num1);
        ulong x11 = y4 * 5UL;
        ulong y5 = x10 ^ x5;
        this.Round(ref x11, ref num1, (uint) (y5 >> 32), (uint) y5);
        num1 *= 5UL;
        ulong y6 = x11 ^ x6;
        this.Round(ref num1, ref y5, (uint) (y6 >> 32), (uint) y6);
        ulong x12 = y5 * 5UL;
        num1 ^= x7;
        this.Round(ref x12, ref y6, (uint) (num1 >> 32), (uint) num1);
        ulong x13 = y6 * 5UL;
        this.KeySchedule(ref x0, ref x1, ref x2, ref x3, ref x4, ref x5, ref x6, ref x7);
        ulong y7 = x12 ^ x0;
        this.Round(ref x13, ref num1, (uint) (y7 >> 32), (uint) y7);
        num1 *= 7UL;
        ulong y8 = x13 ^ x1;
        this.Round(ref num1, ref y7, (uint) (y8 >> 32), (uint) y8);
        ulong x14 = y7 * 7UL;
        num1 ^= x2;
        this.Round(ref x14, ref y8, (uint) (num1 >> 32), (uint) num1);
        ulong x15 = y8 * 7UL;
        ulong y9 = x14 ^ x3;
        this.Round(ref x15, ref num1, (uint) (y9 >> 32), (uint) y9);
        num1 *= 7UL;
        ulong y10 = x15 ^ x4;
        this.Round(ref num1, ref y9, (uint) (y10 >> 32), (uint) y10);
        ulong x16 = y9 * 7UL;
        num1 ^= x5;
        this.Round(ref x16, ref y10, (uint) (num1 >> 32), (uint) num1);
        ulong x17 = y10 * 7UL;
        ulong y11 = x16 ^ x6;
        this.Round(ref x17, ref num1, (uint) (y11 >> 32), (uint) y11);
        num1 *= 7UL;
        ulong y12 = x17 ^ x7;
        this.Round(ref num1, ref y11, (uint) (y12 >> 32), (uint) y12);
        ulong x18 = y11 * 7UL;
        this.KeySchedule(ref x0, ref x1, ref x2, ref x3, ref x4, ref x5, ref x6, ref x7);
        num1 ^= x0;
        this.Round(ref x18, ref y12, (uint) (num1 >> 32), (uint) num1);
        ulong x19 = y12 * 9UL;
        ulong y13 = x18 ^ x1;
        this.Round(ref x19, ref num1, (uint) (y13 >> 32), (uint) y13);
        num1 *= 9UL;
        ulong y14 = x19 ^ x2;
        this.Round(ref num1, ref y13, (uint) (y14 >> 32), (uint) y14);
        ulong x20 = y13 * 9UL;
        num1 ^= x3;
        this.Round(ref x20, ref y14, (uint) (num1 >> 32), (uint) num1);
        ulong x21 = y14 * 9UL;
        ulong y15 = x20 ^ x4;
        this.Round(ref x21, ref num1, (uint) (y15 >> 32), (uint) y15);
        num1 *= 9UL;
        ulong y16 = x21 ^ x5;
        this.Round(ref num1, ref y15, (uint) (y16 >> 32), (uint) y16);
        ulong x22 = y15 * 9UL;
        num1 ^= x6;
        this.Round(ref x22, ref y16, (uint) (num1 >> 32), (uint) num1);
        ulong x23 = y16 * 9UL;
        ulong num11 = x22 ^ x7;
        this.Round(ref x23, ref num1, (uint) (num11 >> 32), (uint) num11);
        num1 *= 9UL;
        num1 = (this.accu[0] ^= num1);
        y1 = num11 - this.accu[1];
        this.accu[1] = y1;
        num2 = (this.accu[2] += x23);
        --iBlkCount;
        inputOffset += this.i_InputBlockSize;
      }
    }

    protected override byte[] ProcessFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount)
    {
      int num1 = this.BlockSize - 8 - (int) (((ulong) inputCount + (ulong) this.l_TotalBytesProcessed) % (ulong) this.BlockSize);
      if (num1 < 1)
      {
        int num2 = num1 + this.BlockSize;
      }
      if (inputOffset > 0 && inputCount > 0)
        Array.Copy((Array) inputBuffer, inputOffset, (Array) inputBuffer, 0, inputCount);
      inputOffset = 0;
      Array.Clear((Array) inputBuffer, inputCount, this.BlockSize - inputCount);
      inputBuffer[inputCount] = (byte) 1;
      ulong num3 = (ulong) (this.l_TotalBytesProcessed + (long) inputCount << 3);
      if (inputCount + 8 >= this.BlockSize)
      {
        if (inputBuffer.Length < 2 * this.BlockSize)
          Array.Resize<byte>(ref inputBuffer, 2 * this.BlockSize);
        this.ProcessBlock(inputBuffer, inputOffset, 1);
        inputOffset += this.BlockSize;
        inputCount -= this.BlockSize;
      }
      inputCount = inputOffset + this.BlockSize - 8;
      while (num3 != 0UL)
      {
        inputBuffer[inputCount] = (byte) num3;
        num3 >>= 8;
        ++inputCount;
      }
      this.ProcessBlock(inputBuffer, inputOffset, 1);
      this.HashValue = new byte[this.HashSize / 8];
      TigerBlockHashAlgorithm.BitTools.TypeBlindCopy(this.accu, 0, this.HashValue, 0, 3);
      return this.HashValue;
    }
  }
}
